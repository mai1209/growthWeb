{"ast":null,"code":"var _jsxFileName = \"/Users/maidev/Desktop/maiWork/growth-web/frontend/src/components/InputMonto.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InputMonto({\n  value,\n  onChange,\n  placeholder,\n  className\n}) {\n  const formatValue = val => {\n    if (!val) return '';\n\n    // Divide el número en parte entera y decimal\n    const [integerPart, decimalPart] = val.split('.');\n\n    // Formatea la parte entera con puntos de miles\n    const formattedInteger = new Intl.NumberFormat('es-AR').format(integerPart);\n\n    // Si hay parte decimal, la une con una coma\n    if (decimalPart !== undefined) {\n      return `${formattedInteger},${decimalPart}`;\n    }\n\n    // Si el usuario acaba de escribir la coma\n    if (val.endsWith('.')) {\n      return `${formattedInteger},`;\n    }\n    return formattedInteger;\n  };\n  const handleChange = e => {\n    const userInput = e.target.value;\n\n    // 1. Limpiar el input para procesarlo internamente\n    // Quita los puntos de miles para no confundir\n    let cleanValue = userInput.replace(/\\./g, '');\n    // Reemplaza la coma decimal por un punto (el formato numérico estándar en JS)\n    cleanValue = cleanValue.replace(/,/g, '.');\n\n    // 2. Validar que sea un número válido con decimales\n    // Esta expresión regular permite números enteros o decimales\n    const isValid = /^\\d*\\.?\\d*$/.test(cleanValue);\n    if (isValid) {\n      // Llama a la función del padre con el valor limpio (ej: \"1234.56\")\n      onChange(cleanValue);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    name: \"monto\",\n    className: style.inputMonto,\n    type: \"text\",\n    inputMode: \"decimal\",\n    placeholder: placeholder || \"Ingresar monto\",\n    required: true,\n    value: formatValue(value) // Mostramos el valor formateado\n    ,\n    onChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_c = InputMonto;\nexport default InputMonto;\nvar _c;\n$RefreshReg$(_c, \"InputMonto\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","InputMonto","value","onChange","placeholder","className","formatValue","val","integerPart","decimalPart","split","formattedInteger","Intl","NumberFormat","format","undefined","endsWith","handleChange","e","userInput","target","cleanValue","replace","isValid","test","name","style","inputMonto","type","inputMode","required","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/maidev/Desktop/maiWork/growth-web/frontend/src/components/InputMonto.jsx"],"sourcesContent":["import React from 'react';\n\nfunction InputMonto({ value, onChange, placeholder, className }) {\n\n  const formatValue = (val) => {\n    if (!val) return '';\n\n    // Divide el número en parte entera y decimal\n    const [integerPart, decimalPart] = val.split('.');\n    \n    // Formatea la parte entera con puntos de miles\n    const formattedInteger = new Intl.NumberFormat('es-AR').format(integerPart);\n\n    // Si hay parte decimal, la une con una coma\n    if (decimalPart !== undefined) {\n      return `${formattedInteger},${decimalPart}`;\n    }\n    \n    // Si el usuario acaba de escribir la coma\n    if (val.endsWith('.')) {\n      return `${formattedInteger},`;\n    }\n\n    return formattedInteger;\n  };\n\n  const handleChange = (e) => {\n    const userInput = e.target.value;\n\n    // 1. Limpiar el input para procesarlo internamente\n    // Quita los puntos de miles para no confundir\n    let cleanValue = userInput.replace(/\\./g, '');\n    // Reemplaza la coma decimal por un punto (el formato numérico estándar en JS)\n    cleanValue = cleanValue.replace(/,/g, '.');\n    \n    // 2. Validar que sea un número válido con decimales\n    // Esta expresión regular permite números enteros o decimales\n    const isValid = /^\\d*\\.?\\d*$/.test(cleanValue);\n\n    if (isValid) {\n      // Llama a la función del padre con el valor limpio (ej: \"1234.56\")\n      onChange(cleanValue);\n    }\n  };\n\n  return (\n    <input\n      name=\"monto\"\n      className={style.inputMonto}\n      type=\"text\"\n      inputMode=\"decimal\"\n      placeholder={placeholder || \"Ingresar monto\"}\n      required\n      value={formatValue(value)} // Mostramos el valor formateado\n      onChange={handleChange}\n    />\n  );\n}\n\nexport default InputMonto;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAC;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,WAAW;EAAEC;AAAU,CAAC,EAAE;EAE/D,MAAMC,WAAW,GAAIC,GAAG,IAAK;IAC3B,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;;IAEnB;IACA,MAAM,CAACC,WAAW,EAAEC,WAAW,CAAC,GAAGF,GAAG,CAACG,KAAK,CAAC,GAAG,CAAC;;IAEjD;IACA,MAAMC,gBAAgB,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAC,CAACC,MAAM,CAACN,WAAW,CAAC;;IAE3E;IACA,IAAIC,WAAW,KAAKM,SAAS,EAAE;MAC7B,OAAO,GAAGJ,gBAAgB,IAAIF,WAAW,EAAE;IAC7C;;IAEA;IACA,IAAIF,GAAG,CAACS,QAAQ,CAAC,GAAG,CAAC,EAAE;MACrB,OAAO,GAAGL,gBAAgB,GAAG;IAC/B;IAEA,OAAOA,gBAAgB;EACzB,CAAC;EAED,MAAMM,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,SAAS,GAAGD,CAAC,CAACE,MAAM,CAAClB,KAAK;;IAEhC;IACA;IACA,IAAImB,UAAU,GAAGF,SAAS,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC7C;IACAD,UAAU,GAAGA,UAAU,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;;IAE1C;IACA;IACA,MAAMC,OAAO,GAAG,aAAa,CAACC,IAAI,CAACH,UAAU,CAAC;IAE9C,IAAIE,OAAO,EAAE;MACX;MACApB,QAAQ,CAACkB,UAAU,CAAC;IACtB;EACF,CAAC;EAED,oBACErB,OAAA;IACEyB,IAAI,EAAC,OAAO;IACZpB,SAAS,EAAEqB,KAAK,CAACC,UAAW;IAC5BC,IAAI,EAAC,MAAM;IACXC,SAAS,EAAC,SAAS;IACnBzB,WAAW,EAAEA,WAAW,IAAI,gBAAiB;IAC7C0B,QAAQ;IACR5B,KAAK,EAAEI,WAAW,CAACJ,KAAK,CAAE,CAAC;IAAA;IAC3BC,QAAQ,EAAEc;EAAa;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN;AAACC,EAAA,GAvDQlC,UAAU;AAyDnB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}